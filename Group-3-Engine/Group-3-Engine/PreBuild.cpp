//Do not edit this file
//It is recreated on build
#include  "PreBuild.h"

#include"AIAgent.h"
#include"AnimatorComponent.h"
#include"AudioComponent.h"
#include"CameraComponent.h"
#include"Collider.h"
#include"ColliderRenderComponent.h"
#include"CollisionManager.h"
#include"FlappyCatController.h"
#include"InputObserverComponent.h"
#include"NavigationComponent.h"
#include"PhysicsComponent.h"
#include"PlayerControllerComponent.h"
#include"PostProcessRenderComponent.h"
#include"RotatorComponent.h"
#include"SpriteRenderComponent.h"
#include"SteeringBehaviourComponent.h"
#include"TextRenderComponent.h"
#include"TilemapRenderComponent.h"
#include"TimerManager.h"
#include"TransformComponent.h"
#include"UnusedClearComponent.h"
#include"VirtualButtonComponent.h"

ComponentPtr<BaseComponent> CreateComponent(Scene& scene, unsigned int id)
{
   ComponentPtr<BaseComponent> component;
   switch (id)
   {
       case GetComponentID(AIAgent):
           component = scene.MakeComponent<AIAgent>();
           break;
       case GetComponentID(AnimatorComponent):
           component = scene.MakeComponent<AnimatorComponent>();
           break;
       case GetComponentID(AudioComponent):
           component = scene.MakeComponent<AudioComponent>();
           break;
       case GetComponentID(CameraComponent):
           component = scene.MakeComponent<CameraComponent>();
           break;
       case GetComponentID(Collider):
           component = scene.MakeComponent<Collider>();
           break;
       case GetComponentID(ColliderRenderComponent):
           component = scene.MakeComponent<ColliderRenderComponent>();
           break;
       case GetComponentID(CollisionManager):
           component = scene.MakeComponent<CollisionManager>();
           break;
       case GetComponentID(FlappyCatController):
           component = scene.MakeComponent<FlappyCatController>();
           break;
       case GetComponentID(InputObserverComponent):
           component = scene.MakeComponent<InputObserverComponent>();
           break;
       case GetComponentID(NavigationComponent):
           component = scene.MakeComponent<NavigationComponent>();
           break;
       case GetComponentID(PhysicsComponent):
           component = scene.MakeComponent<PhysicsComponent>();
           break;
       case GetComponentID(PlayerControllerComponent):
           component = scene.MakeComponent<PlayerControllerComponent>();
           break;
       case GetComponentID(PostProcessRenderComponent):
           component = scene.MakeComponent<PostProcessRenderComponent>();
           break;
       case GetComponentID(RenderComponent):
           component = scene.MakeComponent<RenderComponent>();
           break;
       case GetComponentID(RotatorComponent):
           component = scene.MakeComponent<RotatorComponent>();
           break;
       case GetComponentID(SpriteRenderComponent):
           component = scene.MakeComponent<SpriteRenderComponent>();
           break;
       case GetComponentID(SteeringBehaviourComponent):
           component = scene.MakeComponent<SteeringBehaviourComponent>();
           break;
       case GetComponentID(TextRenderComponent):
           component = scene.MakeComponent<TextRenderComponent>();
           break;
       case GetComponentID(TilemapRenderComponent):
           component = scene.MakeComponent<TilemapRenderComponent>();
           break;
       case GetComponentID(TimerManager):
           component = scene.MakeComponent<TimerManager>();
           break;
       case GetComponentID(TransformComponent):
           component = scene.MakeComponent<TransformComponent>();
           break;
       case GetComponentID(UnusedClearComponent):
           component = scene.MakeComponent<UnusedClearComponent>();
           break;
       case GetComponentID(VirtualButtonComponent):
           component = scene.MakeComponent<VirtualButtonComponent>();
           break;
   }
   
   return component;
}


std::map<std::string, unsigned int> GetComponentStringIDMap()
{
   return std::map<std::string, unsigned int> {
       {"AIAgent",GetComponentID(AIAgent)},
       {"AnimatorComponent",GetComponentID(AnimatorComponent)},
       {"AudioComponent",GetComponentID(AudioComponent)},
       {"CameraComponent",GetComponentID(CameraComponent)},
       {"Collider",GetComponentID(Collider)},
       {"ColliderRenderComponent",GetComponentID(ColliderRenderComponent)},
       {"CollisionManager",GetComponentID(CollisionManager)},
       {"FlappyCatController",GetComponentID(FlappyCatController)},
       {"InputObserverComponent",GetComponentID(InputObserverComponent)},
       {"NavigationComponent",GetComponentID(NavigationComponent)},
       {"PhysicsComponent",GetComponentID(PhysicsComponent)},
       {"PlayerControllerComponent",GetComponentID(PlayerControllerComponent)},
       {"PostProcessRenderComponent",GetComponentID(PostProcessRenderComponent)},
       {"RenderComponent",GetComponentID(RenderComponent)},
       {"RotatorComponent",GetComponentID(RotatorComponent)},
       {"SpriteRenderComponent",GetComponentID(SpriteRenderComponent)},
       {"SteeringBehaviourComponent",GetComponentID(SteeringBehaviourComponent)},
       {"TextRenderComponent",GetComponentID(TextRenderComponent)},
       {"TilemapRenderComponent",GetComponentID(TilemapRenderComponent)},
       {"TimerManager",GetComponentID(TimerManager)},
       {"TransformComponent",GetComponentID(TransformComponent)},
       {"UnusedClearComponent",GetComponentID(UnusedClearComponent)},
       {"VirtualButtonComponent",GetComponentID(VirtualButtonComponent)}
   };
}

std::vector<std::string> GetAllComponentTypeNames()
{
   return std::vector<std::string>{"AIAgent", "AnimatorComponent", "AudioComponent", "CameraComponent", "Collider", "ColliderRenderComponent", "CollisionManager", "FlappyCatController", "InputObserverComponent", "NavigationComponent", "PhysicsComponent", "PlayerControllerComponent", "PostProcessRenderComponent", "RenderComponent", "RotatorComponent", "SpriteRenderComponent", "SteeringBehaviourComponent", "TextRenderComponent", "TilemapRenderComponent", "TimerManager", "TransformComponent", "UnusedClearComponent", "VirtualButtonComponent"};
}
void to_json(nlohmann::json& json, const ComponentPtr<AIAgent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<AnimatorComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<AudioComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<CameraComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<Collider>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<ColliderRenderComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<CollisionManager>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<FlappyCatController>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<InputObserverComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<NavigationComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<PhysicsComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<PlayerControllerComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<PostProcessRenderComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<RenderComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<RotatorComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<SpriteRenderComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<SteeringBehaviourComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<TextRenderComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<TilemapRenderComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<TimerManager>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<TransformComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<UnusedClearComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void to_json(nlohmann::json& json, const ComponentPtr<VirtualButtonComponent>& componentPtr)
{
   to_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}

void from_json(const nlohmann::json& json,ComponentPtr<AIAgent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<AnimatorComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<AudioComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<CameraComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<Collider>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<ColliderRenderComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<CollisionManager>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<FlappyCatController>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<InputObserverComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<NavigationComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<PhysicsComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<PlayerControllerComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<PostProcessRenderComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<RenderComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<RotatorComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<SpriteRenderComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<SteeringBehaviourComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<TextRenderComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<TilemapRenderComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<TimerManager>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<TransformComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<UnusedClearComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
void from_json(const nlohmann::json& json,ComponentPtr<VirtualButtonComponent>& componentPtr)
{
   from_json(json, (ComponentPtr<BaseComponent>&)componentPtr);
}
